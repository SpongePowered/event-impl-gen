plugins {
    id 'com.gradle.plugin-publish' version '0.12.0'
    id 'java-gradle-plugin'
    id 'eclipse'
    id 'idea'
    id 'net.minecrell.licenser' version '0.4.1'
    // id 'com.github.johnrengelman.shadow' version '5.2.0'
}

// Default tasks
defaultTasks 'licenseFormat', 'build'

// Basic project information
group = 'org.spongepowered'

// Minimum version of Java required
sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

// Project repositories and dependencies
repositories {
    jcenter()
}

dependencies {
    implementation(gradleApi())
    implementation 'fr.inria.gforge.spoon:spoon-core:8.3.0'
    implementation 'org.ow2.asm:asm:9.0'
    implementation('com.google.guava:guava:30.0-jre') {
        exclude group: "com.google.code.findbugs", module: "jsr305"
    }
    compileOnly 'org.checkerframework:checker-qual:3.7.1'
    compileOnly 'com.google.errorprone:error_prone_annotations:2.4.0'

    /* TODO: Re-enable when test is fixed
    testCompile 'junit:junit:4.12'
    testCompile 'org.hamcrest:hamcrest-library:1.3'

    testCompile 'org.mockito:mockito-core:1.10.19'
    testCompile 'org.powermock:powermock-module-junit4:1.6.6'
    testCompile 'org.powermock:powermock-api-mockito:1.6.6'
    */
}

// Source compiler configuration
tasks.withType(JavaCompile) {
    options.compilerArgs += ['-Xlint:all', '-Xlint:-path']
    if (JavaVersion.current().java10Compatible) {
        options.compilerArgs += ['--release', '8']
    }
    options.deprecation = true
    options.encoding = 'UTF-8'
}

// JAR manifest configuration
jar {
    // enabled = false

    manifest {
        attributes(
                'Built-By': System.properties['user.name'],
                'Created-By': "${System.properties['java.vm.version']} (${System.properties['java.vm.vendor']})",

                'Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Implementation-Vendor': project.url
        )
    }
}

/* shadowJar {
    archiveClassifier = ''
    minimize()
} */

task sourceJar(type: Jar) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives sourceJar
}

test {
    testLogging {
        exceptionFormat = 'full' // Always print full stack trace if something goes wrong in the unit tests
        showStandardStreams = true
    }
}

// License header formatting
license {
    header = rootProject.file('HEADER.txt')
    newLine = false

    ext {
        name = rootProject.projectName
        organization = rootProject.organization
        url = rootProject.url
    }

    include '**/*.java'
    exclude '**/spoon/fixed/**'
}

gradlePlugin {
    plugins {
        eventImplGenPlugin {
            id = 'org.spongepowered.event-impl-gen'
            implementationClass = 'org.spongepowered.eventimplgen.EventImplGenPlugin'
        }
    }
}

pluginBundle {
    website = "https://github.com/$project.organization/$project.name"
    vcsUrl = website
    description = project.description
    tags = ['minecraft', 'sponge']

    plugins {
        eventImplGenPlugin {
            displayName = 'Sponge Event Implementation Generator'
            description = project.description
        }
    }
}

// Deployment configuration
apply from: 'gradle/deploy.gradle'

/* afterEvaluate {
    publishing.publications.pluginMaven {
        shadow.component(it)
    }
}*/
