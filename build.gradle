plugins {
    alias(libs.plugins.spongeConvention) apply false
    alias(libs.plugins.indra.sonatype) apply false
    alias(libs.plugins.errorprone)
    alias(libs.plugins.eclipseApt)
}

// Default tasks
defaultTasks 'spotlessApply', 'build'

// Basic project information
group = "org.spongepowered"

allprojects {
    apply plugin: "org.spongepowered.gradle.sponge.dev"
    apply plugin: "net.kyori.indra.publishing"
    apply plugin: "net.ltgt.errorprone"
    apply plugin: "com.diffplug.eclipse.apt"

    dependencies {
        errorprone libs.errorprone
    }

    eclipse {
        synchronizationTasks eclipseJdtApt, eclipseJdt, eclipseFactorypath
    }

    tasks.withType(JavaCompile).configureEach {
        options.errorprone.disableWarningsInGeneratedCode = true
        options.compilerArgs << '--module-version' << project.version
    }

    spongeConvention {
        repository("event-impl-gen") {
            ci = true
            publishing = true
        }
        mitLicense()

        licenseParameters {
            organization = rootProject.organization
            url = rootProject.url
        }

        sharedManifest {
            indraGit.applyVcsInformationToManifest(it)
            attributes(
                "Implementation-Title": project.name,
                "Implementation-Version": project.version,
                "Implementation-Vendor": project.url
            )
        }
    }

    indraSpotlessLicenser {
        property("name", rootProject.projectName)
    }
}

indra {
    javaVersions {
        testWith(8, 11, 17)
    }
}

sourceSets {
    main {
        multirelease {
            moduleName "org.spongepowered.eventimplgen"
            alternateVersions 9, 13
        }
    }
}

// Project dependencies
dependencies {
    implementation project(":event-impl-gen-annotations")
    api libs.javapoet

    compileOnlyApi libs.errorprone.annotations

    api libs.dagger.runtime
    annotationProcessor libs.dagger.compiler

    compileOnlyApi libs.autoService.annotations
    annotationProcessor libs.autoService

    compileOnlyApi libs.jetbrainsAnnotations

    // Tests
    testImplementation libs.assertj
    testImplementation libs.joor
    testImplementation platform(libs.junit.bom)
    testImplementation libs.junit.api
    testRuntimeOnly libs.junit.engine
    testRuntimeOnly libs.junit.launcher
}