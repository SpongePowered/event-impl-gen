plugins {
    id "org.spongepowered.gradle.sponge.dev" version "2.1.1" apply false
    id "net.kyori.indra.publishing.sonatype" version "3.0.1"
    id "net.ltgt.errorprone" version "2.0.2"
    id "com.diffplug.eclipse.apt" version "3.39.0"
}

// Default tasks
defaultTasks 'licenseFormat', 'build'

// Basic project information
group = "org.spongepowered"

allprojects {
    apply plugin: "org.spongepowered.gradle.sponge.dev"
    apply plugin: "net.kyori.indra.publishing"
    apply plugin: "net.ltgt.errorprone"
    apply plugin: "com.diffplug.eclipse.apt"

    dependencies {
        errorprone "com.google.errorprone:error_prone_core:$errorproneVersion"
    }

    eclipse {
        synchronizationTasks eclipseJdtApt, eclipseJdt, eclipseFactorypath
    }

    tasks.withType(JavaCompile).configureEach {
        options.errorprone.disableWarningsInGeneratedCode = true
        options.compilerArgs << '--module-version' << project.version
    }

    spongeConvention {
        repository("event-impl-gen") {
            ci = true
            publishing = true
        }
        mitLicense()

        licenseParameters {
            organization = rootProject.organization
            url = rootProject.url
        }

        sharedManifest {
            indraGit.applyVcsInformationToManifest(it)
            attributes(
                "Implementation-Title": project.name,
                "Implementation-Version": project.version,
                "Implementation-Vendor": project.url
            )
        }
    }

    indraSpotlessLicenser {
        property("name", rootProject.projectName)
    }
}

indra {
    javaVersions {
        testWith(8, 11, 17)
    }
}

sourceSets {
    main {
        multirelease {
            moduleName "org.spongepowered.eventimplgen"
            alternateVersions 9, 13
        }
    }
}

// Project dependencies
dependencies {
    implementation project(":event-impl-gen-annotations")
    api "com.squareup:javapoet:1.13.0"

    compileOnlyApi "com.google.errorprone:error_prone_annotations:$errorproneVersion"

    api "com.google.dagger:dagger:$daggerVersion"
    annotationProcessor "com.google.dagger:dagger-compiler:$daggerVersion"

    compileOnlyApi "com.google.auto.service:auto-service-annotations:$autoServiceVersion"
    annotationProcessor "com.google.auto.service:auto-service:$autoServiceVersion"

    compileOnlyApi "org.checkerframework:checker-qual:${checkerQualVersion}"

    // Tests
    testImplementation "org.assertj:assertj-core:3.23.1"
    testImplementation "org.jooq:joor-java-8:0.9.14"
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.9.1"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.9.1"
}