plugins {
    id 'java-gradle-plugin'
    id 'eclipse'
    id 'idea'
    id 'net.minecrell.licenser' version '0.3'
    id 'com.github.johnrengelman.shadow' version '4.0.2'

    id 'com.gradle.plugin-publish' version '0.9.10'
}

// Default tasks
defaultTasks 'licenseFormat', 'build'

// Basic project information
group = 'org.spongepowered'

// Minimum version of Java required
sourceCompatibility = '1.8'
targetCompatibility = '1.8'

// Project repositories and dependencies
repositories {
    mavenCentral()
    maven {
        name = 'sponge'
        url = 'http://repo.spongepowered.org/maven'
    }
}

configurations {
    shade
    compileOnly.extendsFrom shade
}

dependencies {
    //shade 'fr.inria.gforge.spoon:spoon-core:5.6.0'
    shade 'fr.inria.gforge.spoon:spoon-core:7.3.0'
    compile 'org.ow2.asm:asm:5.2'
    compile 'com.google.guava:guava:21.0'
    compile 'com.google.code.findbugs:jsr305:3.0.1'
    compileOnly 'com.google.errorprone:error_prone_annotations:2.0.15'

    /* TODO: Re-enable when test is fixed
    testCompile 'junit:junit:4.12'
    testCompile 'org.hamcrest:hamcrest-library:1.3'

    testCompile 'org.mockito:mockito-core:1.10.19'
    testCompile 'org.powermock:powermock-module-junit4:1.6.6'
    testCompile 'org.powermock:powermock-api-mockito:1.6.6'
    */
}

// Source compiler configuration
tasks.withType(JavaCompile) {
    options.compilerArgs += ['-Xlint:all', '-Xlint:-path']
    options.deprecation = true
    options.encoding = 'UTF-8'
}

// JAR manifest configuration
jar {
    enabled = false

    manifest {
        attributes(
                'Built-By': System.properties['user.name'],
                'Created-By': "${System.properties['java.vm.version']} (${System.properties['java.vm.vendor']})",

                'Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Implementation-Vendor': project.url
        )
    }
}

shadowJar {
    classifier = ''
    configurations = [project.configurations.shade]
    minimize()
    //configurations = [project.configurations.compile]

    //relocate 'spoon', 'org.spongepowered.eventimplgen.shade.spoon'
    //relocate 'org.eclipse.jdt', 'org.spongepowered.eventimplgen.shade.jdt'
    //relocate 'com.martiansoftware', 'org.spongepowered.eventimplgen.shade.ms'
    //relocate 'org.apache.commons', 'org.spongepowered.eventimplgen.shade.commons'

    /*dependencies {
        include dependency('fr.inria.gforge.spoon:spoon-core')
        include dependency('org.eclipse.jdt:org.eclipse.jdt.core')
        include dependency('com.martiansoftware:jsap')
        include dependency('commons-io:commons-io')
        include dependency('org.apache.commons:commons-lang3')
	include dependency('com.fasterxml.jackson.core:jackson-core')
        include dependency('com.fasterxml.jackson.core:jackson-databind')
    }*/
}

task sourceJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives shadowJar
    archives sourceJar
}

test {
    testLogging {
        exceptionFormat = 'full' // Always print full stack trace if something goes wrong in the unit tests
        showStandardStreams = true
    }
}

// License header formatting
license {
    header = rootProject.file('HEADER.txt')
    newLine = false

    ext {
        name = rootProject.projectName
        organization = rootProject.organization
        url = rootProject.url
    }

    include '**/*.java'
    exclude '**/spoon/fixed/**'
}

// Deployment configuration
apply from: 'gradle/deploy.gradle'

pluginBundle {
    website = "https://github.com/$project.organization/$project.name"
    vcsUrl = website
    description = project.description
    tags = ['minecraft', 'sponge']

    plugins {
        eventImplGenPlugin {
            id = 'org.spongepowered.event-impl-gen'
            displayName = 'Sponge Event Implementation Generator'
            description = project.description
        }
    }
}
