import org.jetbrains.gradle.ext.ActionDelegationConfig

plugins {
    id "org.spongepowered.gradle.sponge.dev" version "1.1.1" apply false
    id "net.kyori.indra.publishing.sonatype" version "2.0.5"
    id "org.cadixdev.licenser" version "0.6.1" apply false
    id "net.ltgt.errorprone" version "2.0.1"
    id "org.jetbrains.gradle.plugin.idea-ext" version "1.0"
    id "com.diffplug.eclipse.apt" version "3.30.0"
}

// Default tasks
defaultTasks 'licenseFormat', 'build'

// Basic project information
group = "org.spongepowered"

allprojects {
    apply plugin: "org.spongepowered.gradle.sponge.dev"
    apply plugin: "net.kyori.indra.publishing"
    apply plugin: "net.ltgt.errorprone"
    apply plugin: "com.diffplug.eclipse.apt"

    dependencies {
        errorprone "com.google.errorprone:error_prone_core:$errorproneVersion"
        compileOnlyApi "com.google.errorprone:error_prone_annotations:$errorproneVersion"
    }

    eclipse {
        synchronizationTasks eclipseJdtApt, eclipseJdt, eclipseFactorypath
    }

    tasks.withType(JavaCompile).configureEach {
        options.errorprone.disableWarningsInGeneratedCode = true
    }

    spongeConvention {
        repository("event-impl-gen") {
            ci = true
            publishing = true
        }
        mitLicense()

        licenseParameters {
            name = rootProject.projectName
            organization = rootProject.organization
            url = rootProject.url
        }

        sharedManifest {
            indraGit.applyVcsInformationToManifest(it)
            attributes(
                "Implementation-Title": project.name,
                "Implementation-Version": project.version,
                "Implementation-Vendor": project.url
            )
        }
    }

}

indra {
    javaVersions {
        testWith(8, 11, 16)
    }
}

sourceSets {
    main {
        multirelease {
            alternateVersions 13
        }
    }
}

// Project dependencies
dependencies {
    implementation "org.ow2.asm:asm:9.1"
    implementation project(":event-impl-gen-annotations")

    implementation "com.google.dagger:dagger:$daggerVersion"
    annotationProcessor "com.google.dagger:dagger-compiler:$daggerVersion"

    compileOnlyApi "com.google.auto.service:auto-service-annotations:$autoServiceVersion"
    annotationProcessor "com.google.auto.service:auto-service:$autoServiceVersion"

    compileOnlyApi "org.checkerframework:checker-qual:${checkerQualVersion}"

    // Tests
    testImplementation "org.assertj:assertj-core:3.20.1"
    testImplementation "org.jooq:joor-java-8:0.9.13"
    testImplementation "org.ow2.asm:asm-util:9.1" // for CheckSignatureAdapter
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.7.2"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.7.2"
}

// IDE AP Configuration
idea.project.settings {
    compiler {
        javac {
            moduleJavacAdditionalOptions = [
                'event-impl-gen.event-impl-gen-test-data.main' : '-AeventGenFactory=test.event.TestEventFactory'
            ]
        }
    }

    delegateActions {
        delegateBuildRunToGradle = false
        testRunner = ActionDelegationConfig.TestRunner.PLATFORM
    }
}